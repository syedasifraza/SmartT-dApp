{"dependencies":[{"name":"/root/nos-client-new/my-smartT-dapp/package.json","includedInParent":true,"mtime":1530770845430},{"name":"/root/nos-client-new/my-smartT-dapp/node_modules/crypto-js/package.json","includedInParent":true,"mtime":1481717143000},{"name":"./core","loc":{"line":4,"column":45}}],"generated":{"js":";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));","map":{"mappings":[{"source":"../node_modules/crypto-js/hmac.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/crypto-js/hmac.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}}],"sources":{"../node_modules/crypto-js/hmac.js":";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));"},"lineCount":143}},"hash":"0b1a0022d6d508294613d96bb6654e0e","cacheData":{"env":{}}}