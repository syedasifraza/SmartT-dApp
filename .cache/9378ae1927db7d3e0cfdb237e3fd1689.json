{"dependencies":[{"name":"/root/nos-client-new/SmartT-dApp/package.json","includedInParent":true,"mtime":1533711856700},{"name":"/root/nos-client-new/SmartT-dApp/node_modules/multibase/package.json","includedInParent":true,"mtime":1514804205000},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar e=require(\"buffer\").Buffer;module.exports=function(r){const n=r.indexOf(\"=\")>-1,t=r.indexOf(\"-\")>-1&&r.indexOf(\"_\")>-1;return{encode(r){let f=\"\";f=\"string\"==typeof r?e.from(r).toString(\"base64\"):r.toString(\"base64\"),t&&(f=(f=f.replace(\"+\",\"-\")).replace(\"/\",\"_\"));const o=f.indexOf(\"=\");return o>0&&!n&&(f=f.substring(0,o)),f},decode(n){t&&(n=(n=n.replace(\"+\",\"-\")).replace(\"/\",\"_\"));for(let e of n)if(r.indexOf(e)<0)throw new Error(\"invalid base64 character\");return e.from(n,\"base64\")}}};","map":{"mappings":[{"source":"../node_modules/multibase/src/base64.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/multibase/src/base64.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}}],"sources":{"../node_modules/multibase/src/base64.js":"'use strict'\n\nmodule.exports = function base64 (alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\n\n  return {\n    encode (input) {\n      let output = ''\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64')\n      } else {\n        output = input.toString('base64')\n      }\n\n      if (url) {\n        output = output.replace('+', '-')\n        output = output.replace('/', '_')\n      }\n\n      const pad = output.indexOf('=')\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad)\n      }\n\n      return output\n    },\n    decode (input) {\n      if (url) {\n        input = input.replace('+', '-')\n        input = input.replace('/', '_')\n      }\n\n      for (let char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character')\n        }\n      }\n\n      return Buffer.from(input, 'base64')\n    }\n  }\n}\n"},"lineCount":52}},"hash":"62da6114bcc1922da0873074d41e8cbf","cacheData":{"env":{}}}