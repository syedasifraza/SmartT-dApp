{"dependencies":[{"name":"/root/nos-client-new/SmartT-dApp/package.json","includedInParent":true,"mtime":1533711856700},{"name":"/root/nos-client-new/SmartT-dApp/node_modules/stable/package.json","includedInParent":true,"mtime":1524667104000}],"generated":{"js":"var global = (1,eval)(\"this\");\n//! stable.js 0.1.8, https://github.com/Two-Screen/stable\n//! Â© 2018 Angry Bytes and contributors. MIT licensed.\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.stable = factory());\n}(this, (function () { 'use strict';\n\n  // A stable array sort, because `Array#sort()` is not guaranteed stable.\n  // This is an implementation of merge sort, without recursion.\n\n  var stable = function (arr, comp) {\n    return exec(arr.slice(), comp)\n  };\n\n  stable.inplace = function (arr, comp) {\n    var result = exec(arr, comp);\n\n    // This simply copies back if the result isn't in the original array,\n    // which happens on an odd number of passes.\n    if (result !== arr) {\n      pass(result, null, arr.length, arr);\n    }\n\n    return arr\n  };\n\n  // Execute the sort using the input array and a second buffer as work space.\n  // Returns one of those two, containing the final result.\n  function exec(arr, comp) {\n    if (typeof(comp) !== 'function') {\n      comp = function (a, b) {\n        return String(a).localeCompare(b)\n      };\n    }\n\n    // Short-circuit when there's nothing to sort.\n    var len = arr.length;\n    if (len <= 1) {\n      return arr\n    }\n\n    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\n    // Chunks are the size of the left or right hand in merge sort.\n    // Stop when the left-hand covers all of the array.\n    var buffer = new Array(len);\n    for (var chk = 1; chk < len; chk *= 2) {\n      pass(arr, comp, chk, buffer);\n\n      var tmp = arr;\n      arr = buffer;\n      buffer = tmp;\n    }\n\n    return arr\n  }\n\n  // Run a single pass with the given chunk size.\n  var pass = function (arr, comp, chk, result) {\n    var len = arr.length;\n    var i = 0;\n    // Step size / double chunk size.\n    var dbl = chk * 2;\n    // Bounds of the left and right chunks.\n    var l, r, e;\n    // Iterators over the left and right chunk.\n    var li, ri;\n\n    // Iterate over pairs of chunks.\n    for (l = 0; l < len; l += dbl) {\n      r = l + chk;\n      e = r + chk;\n      if (r > len) r = len;\n      if (e > len) e = len;\n\n      // Iterate both chunks in parallel.\n      li = l;\n      ri = r;\n      while (true) {\n        // Compare the chunks.\n        if (li < r && ri < e) {\n          // This works for a regular `sort()` compatible comparator,\n          // but also for a simple comparator like: `a > b`\n          if (comp(arr[li], arr[ri]) <= 0) {\n            result[i++] = arr[li++];\n          }\n          else {\n            result[i++] = arr[ri++];\n          }\n        }\n        // Nothing to compare, just flush what's left.\n        else if (li < r) {\n          result[i++] = arr[li++];\n        }\n        else if (ri < e) {\n          result[i++] = arr[ri++];\n        }\n        // Both iterators are at the chunk ends.\n        else {\n          break\n        }\n      }\n    }\n  };\n\n  return stable;\n\n})));\n","map":{"mappings":[{"source":"../node_modules/stable/stable.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/stable/stable.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}}],"sources":{"../node_modules/stable/stable.js":"//! stable.js 0.1.8, https://github.com/Two-Screen/stable\n//! Â© 2018 Angry Bytes and contributors. MIT licensed.\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.stable = factory());\n}(this, (function () { 'use strict';\n\n  // A stable array sort, because `Array#sort()` is not guaranteed stable.\n  // This is an implementation of merge sort, without recursion.\n\n  var stable = function (arr, comp) {\n    return exec(arr.slice(), comp)\n  };\n\n  stable.inplace = function (arr, comp) {\n    var result = exec(arr, comp);\n\n    // This simply copies back if the result isn't in the original array,\n    // which happens on an odd number of passes.\n    if (result !== arr) {\n      pass(result, null, arr.length, arr);\n    }\n\n    return arr\n  };\n\n  // Execute the sort using the input array and a second buffer as work space.\n  // Returns one of those two, containing the final result.\n  function exec(arr, comp) {\n    if (typeof(comp) !== 'function') {\n      comp = function (a, b) {\n        return String(a).localeCompare(b)\n      };\n    }\n\n    // Short-circuit when there's nothing to sort.\n    var len = arr.length;\n    if (len <= 1) {\n      return arr\n    }\n\n    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\n    // Chunks are the size of the left or right hand in merge sort.\n    // Stop when the left-hand covers all of the array.\n    var buffer = new Array(len);\n    for (var chk = 1; chk < len; chk *= 2) {\n      pass(arr, comp, chk, buffer);\n\n      var tmp = arr;\n      arr = buffer;\n      buffer = tmp;\n    }\n\n    return arr\n  }\n\n  // Run a single pass with the given chunk size.\n  var pass = function (arr, comp, chk, result) {\n    var len = arr.length;\n    var i = 0;\n    // Step size / double chunk size.\n    var dbl = chk * 2;\n    // Bounds of the left and right chunks.\n    var l, r, e;\n    // Iterators over the left and right chunk.\n    var li, ri;\n\n    // Iterate over pairs of chunks.\n    for (l = 0; l < len; l += dbl) {\n      r = l + chk;\n      e = r + chk;\n      if (r > len) r = len;\n      if (e > len) e = len;\n\n      // Iterate both chunks in parallel.\n      li = l;\n      ri = r;\n      while (true) {\n        // Compare the chunks.\n        if (li < r && ri < e) {\n          // This works for a regular `sort()` compatible comparator,\n          // but also for a simple comparator like: `a > b`\n          if (comp(arr[li], arr[ri]) <= 0) {\n            result[i++] = arr[li++];\n          }\n          else {\n            result[i++] = arr[ri++];\n          }\n        }\n        // Nothing to compare, just flush what's left.\n        else if (li < r) {\n          result[i++] = arr[li++];\n        }\n        else if (ri < e) {\n          result[i++] = arr[ri++];\n        }\n        // Both iterators are at the chunk ends.\n        else {\n          break\n        }\n      }\n    }\n  };\n\n  return stable;\n\n})));\n"},"lineCount":111}},"hash":"803993631cefa4ee0c415c57480022da","cacheData":{"env":{}}}