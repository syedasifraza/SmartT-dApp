{"dependencies":[{"name":"/root/nos-client-new/my-smartT-dapp/package.json","includedInParent":true,"mtime":1531123470301},{"name":"/root/nos-client-new/my-smartT-dapp/node_modules/browserify-aes/package.json","includedInParent":true,"mtime":1508416184000},{"name":"safe-buffer","loc":{"line":1,"column":21}}],"generated":{"js":"\nvar r=require(\"safe-buffer\").Buffer;function e(e,n,c){var f=e._cipher.encryptBlock(e._prev)[0]^n;return e._prev=r.concat([e._prev.slice(1),r.from([c?n:f])]),f}exports.encrypt=function(n,c,f){for(var t=c.length,o=r.allocUnsafe(t),a=-1;++a<t;)o[a]=e(n,c[a],f);return o};","map":{"mappings":[{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/browserify-aes/modes/cfb8.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}}],"sources":{"../node_modules/browserify-aes/modes/cfb8.js":"var Buffer = require('safe-buffer').Buffer\n\nfunction encryptByte (self, byteParam, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev)\n  var out = pad[0] ^ byteParam\n\n  self._prev = Buffer.concat([\n    self._prev.slice(1),\n    Buffer.from([decrypt ? byteParam : out])\n  ])\n\n  return out\n}\n\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length\n  var out = Buffer.allocUnsafe(len)\n  var i = -1\n\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt)\n  }\n\n  return out\n}\n"},"lineCount":28}},"hash":"889ab128a7e4513d065a0db89d686295","cacheData":{"env":{}}}