{"dependencies":[{"name":"/root/nos-client-new/latest-smartt-code/package.json","includedInParent":true,"mtime":1532420826470},{"name":"/root/nos-client-new/latest-smartt-code/node_modules/blakejs/package.json","includedInParent":true,"mtime":1494452225000},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'\n\n// For convenience, let people hash a string, not just a Uint8Array\nfunction normalizeInput (input) {\n  var ret\n  if (input instanceof Uint8Array) {\n    ret = input\n  } else if (input instanceof Buffer) {\n    ret = new Uint8Array(input)\n  } else if (typeof (input) === 'string') {\n    ret = new Uint8Array(Buffer.from(input, 'utf8'))\n  } else {\n    throw new Error(ERROR_MSG_INPUT)\n  }\n  return ret\n}\n\n// Converts a Uint8Array to a hexadecimal string\n// For example, toHex([255, 0, 255]) returns \"ff00ff\"\nfunction toHex (bytes) {\n  return Array.prototype.map.call(bytes, function (n) {\n    return (n < 16 ? '0' : '') + n.toString(16)\n  }).join('')\n}\n\n// Converts any value in [0...2^32-1] to an 8-character hex string\nfunction uint32ToHex (val) {\n  return (0x100000000 + val).toString(16).substring(1)\n}\n\n// For debugging: prints out hash state in the same format as the RFC\n// sample computation exactly, so that you can diff\nfunction debugPrint (label, arr, size) {\n  var msg = '\\n' + label + ' = '\n  for (var i = 0; i < arr.length; i += 2) {\n    if (size === 32) {\n      msg += uint32ToHex(arr[i]).toUpperCase()\n      msg += ' '\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n    } else if (size === 64) {\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n      msg += uint32ToHex(arr[i]).toUpperCase()\n    } else throw new Error('Invalid size ' + size)\n    if (i % 6 === 4) {\n      msg += '\\n' + new Array(label.length + 4).join(' ')\n    } else if (i < arr.length - 2) {\n      msg += ' '\n    }\n  }\n  console.log(msg)\n}\n\n// For performance testing: generates N bytes of input, hashes M times\n// Measures and prints MB/second hash performance each time\nfunction testSpeed (hashFn, N, M) {\n  var startMs = new Date().getTime()\n\n  var input = new Uint8Array(N)\n  for (var i = 0; i < N; i++) {\n    input[i] = i % 256\n  }\n  var genMs = new Date().getTime()\n  console.log('Generated random input in ' + (genMs - startMs) + 'ms')\n  startMs = genMs\n\n  for (i = 0; i < M; i++) {\n    var hashHex = hashFn(input)\n    var hashMs = new Date().getTime()\n    var ms = hashMs - startMs\n    startMs = hashMs\n    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...')\n    console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND')\n  }\n}\n\nmodule.exports = {\n  normalizeInput: normalizeInput,\n  toHex: toHex,\n  debugPrint: debugPrint,\n  testSpeed: testSpeed\n}\n","map":{"mappings":[{"source":"../node_modules/blakejs/util.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/blakejs/util.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}}],"sources":{"../node_modules/blakejs/util.js":"var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'\n\n// For convenience, let people hash a string, not just a Uint8Array\nfunction normalizeInput (input) {\n  var ret\n  if (input instanceof Uint8Array) {\n    ret = input\n  } else if (input instanceof Buffer) {\n    ret = new Uint8Array(input)\n  } else if (typeof (input) === 'string') {\n    ret = new Uint8Array(Buffer.from(input, 'utf8'))\n  } else {\n    throw new Error(ERROR_MSG_INPUT)\n  }\n  return ret\n}\n\n// Converts a Uint8Array to a hexadecimal string\n// For example, toHex([255, 0, 255]) returns \"ff00ff\"\nfunction toHex (bytes) {\n  return Array.prototype.map.call(bytes, function (n) {\n    return (n < 16 ? '0' : '') + n.toString(16)\n  }).join('')\n}\n\n// Converts any value in [0...2^32-1] to an 8-character hex string\nfunction uint32ToHex (val) {\n  return (0x100000000 + val).toString(16).substring(1)\n}\n\n// For debugging: prints out hash state in the same format as the RFC\n// sample computation exactly, so that you can diff\nfunction debugPrint (label, arr, size) {\n  var msg = '\\n' + label + ' = '\n  for (var i = 0; i < arr.length; i += 2) {\n    if (size === 32) {\n      msg += uint32ToHex(arr[i]).toUpperCase()\n      msg += ' '\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n    } else if (size === 64) {\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n      msg += uint32ToHex(arr[i]).toUpperCase()\n    } else throw new Error('Invalid size ' + size)\n    if (i % 6 === 4) {\n      msg += '\\n' + new Array(label.length + 4).join(' ')\n    } else if (i < arr.length - 2) {\n      msg += ' '\n    }\n  }\n  console.log(msg)\n}\n\n// For performance testing: generates N bytes of input, hashes M times\n// Measures and prints MB/second hash performance each time\nfunction testSpeed (hashFn, N, M) {\n  var startMs = new Date().getTime()\n\n  var input = new Uint8Array(N)\n  for (var i = 0; i < N; i++) {\n    input[i] = i % 256\n  }\n  var genMs = new Date().getTime()\n  console.log('Generated random input in ' + (genMs - startMs) + 'ms')\n  startMs = genMs\n\n  for (i = 0; i < M; i++) {\n    var hashHex = hashFn(input)\n    var hashMs = new Date().getTime()\n    var ms = hashMs - startMs\n    startMs = hashMs\n    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...')\n    console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND')\n  }\n}\n\nmodule.exports = {\n  normalizeInput: normalizeInput,\n  toHex: toHex,\n  debugPrint: debugPrint,\n  testSpeed: testSpeed\n}\n"},"lineCount":83}},"hash":"bea644cf915270aef47317af227103c3","cacheData":{"env":{}}}