{"dependencies":[{"name":"/root/nos-client-new/SmartT-dApp/package.json","includedInParent":true,"mtime":1533711856700},{"name":"/root/nos-client-new/SmartT-dApp/node_modules/buffer-alloc-unsafe/package.json","includedInParent":true,"mtime":1527635910000},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nvar e=require(\"buffer\").Buffer;function r(r){if(\"number\"!=typeof r)throw new TypeError('\"size\" argument must be a number');if(r<0)throw new RangeError('\"size\" argument must not be negative');return e.allocUnsafe?e.allocUnsafe(r):new e(r)}module.exports=r;","map":{"mappings":[{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/buffer-alloc-unsafe/index.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}}],"sources":{"../node_modules/buffer-alloc-unsafe/index.js":"function allocUnsafe (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n\n  if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n\n  if (Buffer.allocUnsafe) {\n    return Buffer.allocUnsafe(size)\n  } else {\n    return new Buffer(size)\n  }\n}\n\nmodule.exports = allocUnsafe\n"},"lineCount":20}},"hash":"8a81f9abcb39d4632f29d9ddb36ae2e0","cacheData":{"env":{}}}