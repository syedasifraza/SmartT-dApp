{"dependencies":[{"name":"/root/nos-client-new/latest-smartt-code/package.json","includedInParent":true,"mtime":1532424333180},{"name":"/root/nos-client-new/latest-smartt-code/node_modules/node-forge/package.json","includedInParent":true,"mtime":499162500000},{"name":"./forge","loc":{"line":8,"column":20}},{"name":"./random","loc":{"line":9,"column":8}},{"name":"./util","loc":{"line":10,"column":8}}],"generated":{"js":"/**\n * Javascript implementation of PKCS#1 PSS signature padding.\n *\n * @author Stefan Siegl\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n */\nvar forge = require('./forge');\nrequire('./random');\nrequire('./util');\n\n// shortcut for PSS API\nvar pss = module.exports = forge.pss = forge.pss || {};\n\n/**\n * Creates a PSS signature scheme object.\n *\n * There are several ways to provide a salt for encoding:\n *\n * 1. Specify the saltLength only and the built-in PRNG will generate it.\n * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that\n *   will be used.\n * 3. Specify the salt itself as a forge.util.ByteBuffer.\n *\n * @param options the options to use:\n *          md the message digest object to use, a forge md instance.\n *          mgf the mask generation function to use, a forge mgf instance.\n *          [saltLength] the length of the salt in octets.\n *          [prng] the pseudo-random number generator to use to produce a salt.\n *          [salt] the salt to use when encoding.\n *\n * @return a signature scheme object.\n */\npss.create = function(options) {\n  // backwards compatibility w/legacy args: hash, mgf, sLen\n  if(arguments.length === 3) {\n    options = {\n      md: arguments[0],\n      mgf: arguments[1],\n      saltLength: arguments[2]\n    };\n  }\n\n  var hash = options.md;\n  var mgf = options.mgf;\n  var hLen = hash.digestLength;\n\n  var salt_ = options.salt || null;\n  if(typeof salt_ === 'string') {\n    // assume binary-encoded string\n    salt_ = forge.util.createBuffer(salt_);\n  }\n\n  var sLen;\n  if('saltLength' in options) {\n    sLen = options.saltLength;\n  } else if(salt_ !== null) {\n    sLen = salt_.length();\n  } else {\n    throw new Error('Salt length not specified or specific salt not given.');\n  }\n\n  if(salt_ !== null && salt_.length() !== sLen) {\n    throw new Error('Given salt length does not match length of given salt.');\n  }\n\n  var prng = options.prng || forge.random;\n\n  var pssobj = {};\n\n  /**\n   * Encodes a PSS signature.\n   *\n   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.\n   *\n   * @param md the message digest object with the hash to sign.\n   * @param modsBits the length of the RSA modulus in bits.\n   *\n   * @return the encoded message as a binary-encoded string of length\n   *           ceil((modBits - 1) / 8).\n   */\n  pssobj.encode = function(md, modBits) {\n    var i;\n    var emBits = modBits - 1;\n    var emLen = Math.ceil(emBits / 8);\n\n    /* 2. Let mHash = Hash(M), an octet string of length hLen. */\n    var mHash = md.digest().getBytes();\n\n    /* 3. If emLen < hLen + sLen + 2, output \"encoding error\" and stop. */\n    if(emLen < hLen + sLen + 2) {\n      throw new Error('Message is too long to encrypt.');\n    }\n\n    /* 4. Generate a random octet string salt of length sLen; if sLen = 0,\n     *    then salt is the empty string. */\n    var salt;\n    if(salt_ === null) {\n      salt = prng.getBytesSync(sLen);\n    } else {\n      salt = salt_.bytes();\n    }\n\n    /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */\n    var m_ = new forge.util.ByteBuffer();\n    m_.fillWithByte(0, 8);\n    m_.putBytes(mHash);\n    m_.putBytes(salt);\n\n    /* 6. Let H = Hash(M'), an octet string of length hLen. */\n    hash.start();\n    hash.update(m_.getBytes());\n    var h = hash.digest().getBytes();\n\n    /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2\n     *    zero octets.  The length of PS may be 0. */\n    var ps = new forge.util.ByteBuffer();\n    ps.fillWithByte(0, emLen - sLen - hLen - 2);\n\n    /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length\n     *    emLen - hLen - 1. */\n    ps.putByte(0x01);\n    ps.putBytes(salt);\n    var db = ps.getBytes();\n\n    /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */\n    var maskLen = emLen - hLen - 1;\n    var dbMask = mgf.generate(h, maskLen);\n\n    /* 10. Let maskedDB = DB \\xor dbMask. */\n    var maskedDB = '';\n    for(i = 0; i < maskLen; i++) {\n      maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));\n    }\n\n    /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in\n     *     maskedDB to zero. */\n    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;\n    maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) +\n      maskedDB.substr(1);\n\n    /* 12. Let EM = maskedDB || H || 0xbc.\n     * 13. Output EM. */\n    return maskedDB + h + String.fromCharCode(0xbc);\n  };\n\n  /**\n   * Verifies a PSS signature.\n   *\n   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.\n   *\n   * @param mHash the message digest hash, as a binary-encoded string, to\n   *         compare against the signature.\n   * @param em the encoded message, as a binary-encoded string\n   *          (RSA decryption result).\n   * @param modsBits the length of the RSA modulus in bits.\n   *\n   * @return true if the signature was verified, false if not.\n   */\n  pssobj.verify = function(mHash, em, modBits) {\n    var i;\n    var emBits = modBits - 1;\n    var emLen = Math.ceil(emBits / 8);\n\n    /* c. Convert the message representative m to an encoded message EM\n     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits\n     *    is the length in bits of the RSA modulus n */\n    em = em.substr(-emLen);\n\n    /* 3. If emLen < hLen + sLen + 2, output \"inconsistent\" and stop. */\n    if(emLen < hLen + sLen + 2) {\n      throw new Error('Inconsistent parameters to PSS signature verification.');\n    }\n\n    /* 4. If the rightmost octet of EM does not have hexadecimal value\n     *    0xbc, output \"inconsistent\" and stop. */\n    if(em.charCodeAt(emLen - 1) !== 0xbc) {\n      throw new Error('Encoded message does not end in 0xBC.');\n    }\n\n    /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and\n     *    let H be the next hLen octets. */\n    var maskLen = emLen - hLen - 1;\n    var maskedDB = em.substr(0, maskLen);\n    var h = em.substr(maskLen, hLen);\n\n    /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in\n     *    maskedDB are not all equal to zero, output \"inconsistent\" and stop. */\n    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;\n    if((maskedDB.charCodeAt(0) & mask) !== 0) {\n      throw new Error('Bits beyond keysize not zero as expected.');\n    }\n\n    /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */\n    var dbMask = mgf.generate(h, maskLen);\n\n    /* 8. Let DB = maskedDB \\xor dbMask. */\n    var db = '';\n    for(i = 0; i < maskLen; i++) {\n      db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));\n    }\n\n    /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet\n     * in DB to zero. */\n    db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);\n\n    /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero\n     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost\n     * position is \"position 1\") does not have hexadecimal value 0x01,\n     * output \"inconsistent\" and stop. */\n    var checkLen = emLen - hLen - sLen - 2;\n    for(i = 0; i < checkLen; i++) {\n      if(db.charCodeAt(i) !== 0x00) {\n        throw new Error('Leftmost octets not zero as expected');\n      }\n    }\n\n    if(db.charCodeAt(checkLen) !== 0x01) {\n      throw new Error('Inconsistent PSS signature, 0x01 marker not found');\n    }\n\n    /* 11. Let salt be the last sLen octets of DB. */\n    var salt = db.substr(-sLen);\n\n    /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */\n    var m_ = new forge.util.ByteBuffer();\n    m_.fillWithByte(0, 8);\n    m_.putBytes(mHash);\n    m_.putBytes(salt);\n\n    /* 13. Let H' = Hash(M'), an octet string of length hLen. */\n    hash.start();\n    hash.update(m_.getBytes());\n    var h_ = hash.digest().getBytes();\n\n    /* 14. If H = H', output \"consistent.\" Otherwise, output \"inconsistent.\" */\n    return h === h_;\n  };\n\n  return pssobj;\n};\n","map":{"mappings":[{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/node-forge/lib/pss.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}}],"sources":{"../node_modules/node-forge/lib/pss.js":"/**\n * Javascript implementation of PKCS#1 PSS signature padding.\n *\n * @author Stefan Siegl\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n */\nvar forge = require('./forge');\nrequire('./random');\nrequire('./util');\n\n// shortcut for PSS API\nvar pss = module.exports = forge.pss = forge.pss || {};\n\n/**\n * Creates a PSS signature scheme object.\n *\n * There are several ways to provide a salt for encoding:\n *\n * 1. Specify the saltLength only and the built-in PRNG will generate it.\n * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that\n *   will be used.\n * 3. Specify the salt itself as a forge.util.ByteBuffer.\n *\n * @param options the options to use:\n *          md the message digest object to use, a forge md instance.\n *          mgf the mask generation function to use, a forge mgf instance.\n *          [saltLength] the length of the salt in octets.\n *          [prng] the pseudo-random number generator to use to produce a salt.\n *          [salt] the salt to use when encoding.\n *\n * @return a signature scheme object.\n */\npss.create = function(options) {\n  // backwards compatibility w/legacy args: hash, mgf, sLen\n  if(arguments.length === 3) {\n    options = {\n      md: arguments[0],\n      mgf: arguments[1],\n      saltLength: arguments[2]\n    };\n  }\n\n  var hash = options.md;\n  var mgf = options.mgf;\n  var hLen = hash.digestLength;\n\n  var salt_ = options.salt || null;\n  if(typeof salt_ === 'string') {\n    // assume binary-encoded string\n    salt_ = forge.util.createBuffer(salt_);\n  }\n\n  var sLen;\n  if('saltLength' in options) {\n    sLen = options.saltLength;\n  } else if(salt_ !== null) {\n    sLen = salt_.length();\n  } else {\n    throw new Error('Salt length not specified or specific salt not given.');\n  }\n\n  if(salt_ !== null && salt_.length() !== sLen) {\n    throw new Error('Given salt length does not match length of given salt.');\n  }\n\n  var prng = options.prng || forge.random;\n\n  var pssobj = {};\n\n  /**\n   * Encodes a PSS signature.\n   *\n   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.\n   *\n   * @param md the message digest object with the hash to sign.\n   * @param modsBits the length of the RSA modulus in bits.\n   *\n   * @return the encoded message as a binary-encoded string of length\n   *           ceil((modBits - 1) / 8).\n   */\n  pssobj.encode = function(md, modBits) {\n    var i;\n    var emBits = modBits - 1;\n    var emLen = Math.ceil(emBits / 8);\n\n    /* 2. Let mHash = Hash(M), an octet string of length hLen. */\n    var mHash = md.digest().getBytes();\n\n    /* 3. If emLen < hLen + sLen + 2, output \"encoding error\" and stop. */\n    if(emLen < hLen + sLen + 2) {\n      throw new Error('Message is too long to encrypt.');\n    }\n\n    /* 4. Generate a random octet string salt of length sLen; if sLen = 0,\n     *    then salt is the empty string. */\n    var salt;\n    if(salt_ === null) {\n      salt = prng.getBytesSync(sLen);\n    } else {\n      salt = salt_.bytes();\n    }\n\n    /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */\n    var m_ = new forge.util.ByteBuffer();\n    m_.fillWithByte(0, 8);\n    m_.putBytes(mHash);\n    m_.putBytes(salt);\n\n    /* 6. Let H = Hash(M'), an octet string of length hLen. */\n    hash.start();\n    hash.update(m_.getBytes());\n    var h = hash.digest().getBytes();\n\n    /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2\n     *    zero octets.  The length of PS may be 0. */\n    var ps = new forge.util.ByteBuffer();\n    ps.fillWithByte(0, emLen - sLen - hLen - 2);\n\n    /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length\n     *    emLen - hLen - 1. */\n    ps.putByte(0x01);\n    ps.putBytes(salt);\n    var db = ps.getBytes();\n\n    /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */\n    var maskLen = emLen - hLen - 1;\n    var dbMask = mgf.generate(h, maskLen);\n\n    /* 10. Let maskedDB = DB \\xor dbMask. */\n    var maskedDB = '';\n    for(i = 0; i < maskLen; i++) {\n      maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));\n    }\n\n    /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in\n     *     maskedDB to zero. */\n    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;\n    maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) +\n      maskedDB.substr(1);\n\n    /* 12. Let EM = maskedDB || H || 0xbc.\n     * 13. Output EM. */\n    return maskedDB + h + String.fromCharCode(0xbc);\n  };\n\n  /**\n   * Verifies a PSS signature.\n   *\n   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.\n   *\n   * @param mHash the message digest hash, as a binary-encoded string, to\n   *         compare against the signature.\n   * @param em the encoded message, as a binary-encoded string\n   *          (RSA decryption result).\n   * @param modsBits the length of the RSA modulus in bits.\n   *\n   * @return true if the signature was verified, false if not.\n   */\n  pssobj.verify = function(mHash, em, modBits) {\n    var i;\n    var emBits = modBits - 1;\n    var emLen = Math.ceil(emBits / 8);\n\n    /* c. Convert the message representative m to an encoded message EM\n     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits\n     *    is the length in bits of the RSA modulus n */\n    em = em.substr(-emLen);\n\n    /* 3. If emLen < hLen + sLen + 2, output \"inconsistent\" and stop. */\n    if(emLen < hLen + sLen + 2) {\n      throw new Error('Inconsistent parameters to PSS signature verification.');\n    }\n\n    /* 4. If the rightmost octet of EM does not have hexadecimal value\n     *    0xbc, output \"inconsistent\" and stop. */\n    if(em.charCodeAt(emLen - 1) !== 0xbc) {\n      throw new Error('Encoded message does not end in 0xBC.');\n    }\n\n    /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and\n     *    let H be the next hLen octets. */\n    var maskLen = emLen - hLen - 1;\n    var maskedDB = em.substr(0, maskLen);\n    var h = em.substr(maskLen, hLen);\n\n    /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in\n     *    maskedDB are not all equal to zero, output \"inconsistent\" and stop. */\n    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;\n    if((maskedDB.charCodeAt(0) & mask) !== 0) {\n      throw new Error('Bits beyond keysize not zero as expected.');\n    }\n\n    /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */\n    var dbMask = mgf.generate(h, maskLen);\n\n    /* 8. Let DB = maskedDB \\xor dbMask. */\n    var db = '';\n    for(i = 0; i < maskLen; i++) {\n      db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));\n    }\n\n    /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet\n     * in DB to zero. */\n    db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);\n\n    /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero\n     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost\n     * position is \"position 1\") does not have hexadecimal value 0x01,\n     * output \"inconsistent\" and stop. */\n    var checkLen = emLen - hLen - sLen - 2;\n    for(i = 0; i < checkLen; i++) {\n      if(db.charCodeAt(i) !== 0x00) {\n        throw new Error('Leftmost octets not zero as expected');\n      }\n    }\n\n    if(db.charCodeAt(checkLen) !== 0x01) {\n      throw new Error('Inconsistent PSS signature, 0x01 marker not found');\n    }\n\n    /* 11. Let salt be the last sLen octets of DB. */\n    var salt = db.substr(-sLen);\n\n    /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */\n    var m_ = new forge.util.ByteBuffer();\n    m_.fillWithByte(0, 8);\n    m_.putBytes(mHash);\n    m_.putBytes(salt);\n\n    /* 13. Let H' = Hash(M'), an octet string of length hLen. */\n    hash.start();\n    hash.update(m_.getBytes());\n    var h_ = hash.digest().getBytes();\n\n    /* 14. If H = H', output \"consistent.\" Otherwise, output \"inconsistent.\" */\n    return h === h_;\n  };\n\n  return pssobj;\n};\n"},"lineCount":242}},"hash":"f212ffef98e031791e9857bcaa00cb89","cacheData":{"env":{}}}