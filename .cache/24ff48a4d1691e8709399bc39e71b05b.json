{"dependencies":[{"name":"/root/nos-client-new/my-smartT-dapp/package.json","includedInParent":true,"mtime":1532311653046},{"name":"/root/nos-client-new/my-smartT-dapp/node_modules/libp2p-crypto/node_modules/node-forge/package.json","includedInParent":true,"mtime":499162500000},{"name":"./forge","loc":{"line":10,"column":20}},{"name":"./util","loc":{"line":11,"column":8}},{"name":"./random","loc":{"line":12,"column":8}},{"name":"./jsbn","loc":{"line":13,"column":8}}],"generated":{"js":"/**\n * Javascript implementation of RSA-KEM.\n *\n * @author Lautaro Cozzani Rodriguez\n * @author Dave Longley\n *\n * Copyright (c) 2014 Lautaro Cozzani <lautaro.cozzani@scytl.com>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./random');\nrequire('./jsbn');\n\nmodule.exports = forge.kem = forge.kem || {};\n\nvar BigInteger = forge.jsbn.BigInteger;\n\n/**\n * The API for the RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.\n */\nforge.kem.rsa = {};\n\n/**\n * Creates an RSA KEM API object for generating a secret asymmetric key.\n *\n * The symmetric key may be generated via a call to 'encrypt', which will\n * produce a ciphertext to be transmitted to the recipient and a key to be\n * kept secret. The ciphertext is a parameter to be passed to 'decrypt' which\n * will produce the same secret key for the recipient to use to decrypt a\n * message that was encrypted with the secret key.\n *\n * @param kdf the KDF API to use (eg: new forge.kem.kdf1()).\n * @param options the options to use.\n *          [prng] a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n */\nforge.kem.rsa.create = function(kdf, options) {\n  options = options || {};\n  var prng = options.prng || forge.random;\n\n  var kem = {};\n\n  /**\n   * Generates a secret key and its encapsulation.\n   *\n   * @param publicKey the RSA public key to encrypt with.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return an object with:\n   *   encapsulation: the ciphertext for generating the secret key, as a\n   *     binary-encoded string of bytes.\n   *   key: the secret key to use for encrypting a message.\n   */\n  kem.encrypt = function(publicKey, keyLength) {\n    // generate a random r where 1 > r > n\n    var byteLength = Math.ceil(publicKey.n.bitLength() / 8);\n    var r;\n    do {\n      r = new BigInteger(\n        forge.util.bytesToHex(prng.getBytesSync(byteLength)),\n        16).mod(publicKey.n);\n    } while(r.equals(BigInteger.ZERO));\n\n    // prepend r with zeros\n    r = forge.util.hexToBytes(r.toString(16));\n    var zeros = byteLength - r.length;\n    if(zeros > 0) {\n      r = forge.util.fillString(String.fromCharCode(0), zeros) + r;\n    }\n\n    // encrypt the random\n    var encapsulation = publicKey.encrypt(r, 'NONE');\n\n    // generate the secret key\n    var key = kdf.generate(r, keyLength);\n\n    return {encapsulation: encapsulation, key: key};\n  };\n\n  /**\n   * Decrypts an encapsulated secret key.\n   *\n   * @param privateKey the RSA private key to decrypt with.\n   * @param encapsulation the ciphertext for generating the secret key, as\n   *          a binary-encoded string of bytes.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return the secret key as a binary-encoded string of bytes.\n   */\n  kem.decrypt = function(privateKey, encapsulation, keyLength) {\n    // decrypt the encapsulation and generate the secret key\n    var r = privateKey.decrypt(encapsulation, 'NONE');\n    return kdf.generate(r, keyLength);\n  };\n\n  return kem;\n};\n\n// TODO: add forge.kem.kdf.create('KDF1', {md: ..., ...}) API?\n\n/**\n * Creates a key derivation API object that implements KDF1 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF1 API object.\n */\nforge.kem.kdf1 = function(md, digestLength) {\n  _createKDF(this, md, 0, digestLength || md.digestLength);\n};\n\n/**\n * Creates a key derivation API object that implements KDF2 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF2 API object.\n */\nforge.kem.kdf2 = function(md, digestLength) {\n  _createKDF(this, md, 1, digestLength || md.digestLength);\n};\n\n/**\n * Creates a KDF1 or KDF2 API object.\n *\n * @param md the hash API to use.\n * @param counterStart the starting index for the counter.\n * @param digestLength the digest length to use.\n *\n * @return the KDF API object.\n */\nfunction _createKDF(kdf, md, counterStart, digestLength) {\n  /**\n   * Generate a key of the specified length.\n   *\n   * @param x the binary-encoded byte string to generate a key from.\n   * @param length the number of bytes to generate (the size of the key).\n   *\n   * @return the key as a binary-encoded string.\n   */\n  kdf.generate = function(x, length) {\n    var key = new forge.util.ByteBuffer();\n\n    // run counter from counterStart to ceil(length / Hash.len)\n    var k = Math.ceil(length / digestLength) + counterStart;\n\n    var c = new forge.util.ByteBuffer();\n    for(var i = counterStart; i < k; ++i) {\n      // I2OSP(i, 4): convert counter to an octet string of 4 octets\n      c.putInt32(i);\n\n      // digest 'x' and the counter and add the result to the key\n      md.start();\n      md.update(x + c.getBytes());\n      var hash = md.digest();\n      key.putBytes(hash.getBytes(digestLength));\n    }\n\n    // truncate to the correct key length\n    key.truncate(key.length() - length);\n    return key.getBytes();\n  };\n}\n","map":{"mappings":[{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}}],"sources":{"../node_modules/libp2p-crypto/node_modules/node-forge/lib/kem.js":"/**\n * Javascript implementation of RSA-KEM.\n *\n * @author Lautaro Cozzani Rodriguez\n * @author Dave Longley\n *\n * Copyright (c) 2014 Lautaro Cozzani <lautaro.cozzani@scytl.com>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./random');\nrequire('./jsbn');\n\nmodule.exports = forge.kem = forge.kem || {};\n\nvar BigInteger = forge.jsbn.BigInteger;\n\n/**\n * The API for the RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.\n */\nforge.kem.rsa = {};\n\n/**\n * Creates an RSA KEM API object for generating a secret asymmetric key.\n *\n * The symmetric key may be generated via a call to 'encrypt', which will\n * produce a ciphertext to be transmitted to the recipient and a key to be\n * kept secret. The ciphertext is a parameter to be passed to 'decrypt' which\n * will produce the same secret key for the recipient to use to decrypt a\n * message that was encrypted with the secret key.\n *\n * @param kdf the KDF API to use (eg: new forge.kem.kdf1()).\n * @param options the options to use.\n *          [prng] a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n */\nforge.kem.rsa.create = function(kdf, options) {\n  options = options || {};\n  var prng = options.prng || forge.random;\n\n  var kem = {};\n\n  /**\n   * Generates a secret key and its encapsulation.\n   *\n   * @param publicKey the RSA public key to encrypt with.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return an object with:\n   *   encapsulation: the ciphertext for generating the secret key, as a\n   *     binary-encoded string of bytes.\n   *   key: the secret key to use for encrypting a message.\n   */\n  kem.encrypt = function(publicKey, keyLength) {\n    // generate a random r where 1 > r > n\n    var byteLength = Math.ceil(publicKey.n.bitLength() / 8);\n    var r;\n    do {\n      r = new BigInteger(\n        forge.util.bytesToHex(prng.getBytesSync(byteLength)),\n        16).mod(publicKey.n);\n    } while(r.equals(BigInteger.ZERO));\n\n    // prepend r with zeros\n    r = forge.util.hexToBytes(r.toString(16));\n    var zeros = byteLength - r.length;\n    if(zeros > 0) {\n      r = forge.util.fillString(String.fromCharCode(0), zeros) + r;\n    }\n\n    // encrypt the random\n    var encapsulation = publicKey.encrypt(r, 'NONE');\n\n    // generate the secret key\n    var key = kdf.generate(r, keyLength);\n\n    return {encapsulation: encapsulation, key: key};\n  };\n\n  /**\n   * Decrypts an encapsulated secret key.\n   *\n   * @param privateKey the RSA private key to decrypt with.\n   * @param encapsulation the ciphertext for generating the secret key, as\n   *          a binary-encoded string of bytes.\n   * @param keyLength the length, in bytes, of the secret key to generate.\n   *\n   * @return the secret key as a binary-encoded string of bytes.\n   */\n  kem.decrypt = function(privateKey, encapsulation, keyLength) {\n    // decrypt the encapsulation and generate the secret key\n    var r = privateKey.decrypt(encapsulation, 'NONE');\n    return kdf.generate(r, keyLength);\n  };\n\n  return kem;\n};\n\n// TODO: add forge.kem.kdf.create('KDF1', {md: ..., ...}) API?\n\n/**\n * Creates a key derivation API object that implements KDF1 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF1 API object.\n */\nforge.kem.kdf1 = function(md, digestLength) {\n  _createKDF(this, md, 0, digestLength || md.digestLength);\n};\n\n/**\n * Creates a key derivation API object that implements KDF2 per ISO 18033-2.\n *\n * @param md the hash API to use.\n * @param [digestLength] an optional digest length that must be positive and\n *          less than or equal to md.digestLength.\n *\n * @return a KDF2 API object.\n */\nforge.kem.kdf2 = function(md, digestLength) {\n  _createKDF(this, md, 1, digestLength || md.digestLength);\n};\n\n/**\n * Creates a KDF1 or KDF2 API object.\n *\n * @param md the hash API to use.\n * @param counterStart the starting index for the counter.\n * @param digestLength the digest length to use.\n *\n * @return the KDF API object.\n */\nfunction _createKDF(kdf, md, counterStart, digestLength) {\n  /**\n   * Generate a key of the specified length.\n   *\n   * @param x the binary-encoded byte string to generate a key from.\n   * @param length the number of bytes to generate (the size of the key).\n   *\n   * @return the key as a binary-encoded string.\n   */\n  kdf.generate = function(x, length) {\n    var key = new forge.util.ByteBuffer();\n\n    // run counter from counterStart to ceil(length / Hash.len)\n    var k = Math.ceil(length / digestLength) + counterStart;\n\n    var c = new forge.util.ByteBuffer();\n    for(var i = counterStart; i < k; ++i) {\n      // I2OSP(i, 4): convert counter to an octet string of 4 octets\n      c.putInt32(i);\n\n      // digest 'x' and the counter and add the result to the key\n      md.start();\n      md.update(x + c.getBytes());\n      var hash = md.digest();\n      key.putBytes(hash.getBytes(digestLength));\n    }\n\n    // truncate to the correct key length\n    key.truncate(key.length() - length);\n    return key.getBytes();\n  };\n}\n"},"lineCount":169}},"hash":"4bf6634ffbad914ad7ba544aa538dc23","cacheData":{"env":{}}}