{"dependencies":[{"name":"/root/nos-client-new/latest-smartt-code/package.json","includedInParent":true,"mtime":1532424333180},{"name":"/root/nos-client-new/latest-smartt-code/node_modules/node-forge/package.json","includedInParent":true,"mtime":499162500000},{"name":"./forge","loc":{"line":8,"column":20}},{"name":"./util","loc":{"line":9,"column":8}}],"generated":{"js":"/**\n * Supported cipher modes.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nforge.cipher = forge.cipher || {};\n\n// supported cipher modes\nvar modes = module.exports = forge.cipher.modes = forge.cipher.modes || {};\n\n/** Electronic codebook (ECB) (Don't use this; it's not secure) **/\n\nmodes.ecb = function(options) {\n  options = options || {};\n  this.name = 'ECB';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = new Array(this._ints);\n  this._outBlock = new Array(this._ints);\n};\n\nmodes.ecb.prototype.start = function(options) {};\n\nmodes.ecb.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // write output\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\nmodes.ecb.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // decrypt block\n  this.cipher.decrypt(this._inBlock, this._outBlock);\n\n  // write output\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\nmodes.ecb.prototype.pad = function(input, options) {\n  // add PKCS#7 padding to block (each pad byte is the\n  // value of the number of pad bytes)\n  var padding = (input.length() === this.blockSize ?\n    this.blockSize : (this.blockSize - input.length()));\n  input.fillWithByte(padding, padding);\n  return true;\n};\n\nmodes.ecb.prototype.unpad = function(output, options) {\n  // check for error: input data not a multiple of blockSize\n  if(options.overflow > 0) {\n    return false;\n  }\n\n  // ensure padding byte count is valid\n  var len = output.length();\n  var count = output.at(len - 1);\n  if(count > (this.blockSize << 2)) {\n    return false;\n  }\n\n  // trim off padding bytes\n  output.truncate(count);\n  return true;\n};\n\n/** Cipher-block Chaining (CBC) **/\n\nmodes.cbc = function(options) {\n  options = options || {};\n  this.name = 'CBC';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = new Array(this._ints);\n  this._outBlock = new Array(this._ints);\n};\n\nmodes.cbc.prototype.start = function(options) {\n  // Note: legacy support for using IV residue (has security flaws)\n  // if IV is null, reuse block from previous processing\n  if(options.iv === null) {\n    // must have a previous block\n    if(!this._prev) {\n      throw new Error('Invalid IV parameter.');\n    }\n    this._iv = this._prev.slice(0);\n  } else if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  } else {\n    // save IV as \"previous\" block\n    this._iv = transformIV(options.iv);\n    this._prev = this._iv.slice(0);\n  }\n};\n\nmodes.cbc.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  // CBC XOR's IV (or previous block) with plaintext\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = this._prev[i] ^ input.getInt32();\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // write output, save previous block\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n  this._prev = this._outBlock;\n};\n\nmodes.cbc.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // decrypt block\n  this.cipher.decrypt(this._inBlock, this._outBlock);\n\n  // write output, save previous ciphered block\n  // CBC XOR's IV (or previous block) with ciphertext\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._prev[i] ^ this._outBlock[i]);\n  }\n  this._prev = this._inBlock.slice(0);\n};\n\nmodes.cbc.prototype.pad = function(input, options) {\n  // add PKCS#7 padding to block (each pad byte is the\n  // value of the number of pad bytes)\n  var padding = (input.length() === this.blockSize ?\n    this.blockSize : (this.blockSize - input.length()));\n  input.fillWithByte(padding, padding);\n  return true;\n};\n\nmodes.cbc.prototype.unpad = function(output, options) {\n  // check for error: input data not a multiple of blockSize\n  if(options.overflow > 0) {\n    return false;\n  }\n\n  // ensure padding byte count is valid\n  var len = output.length();\n  var count = output.at(len - 1);\n  if(count > (this.blockSize << 2)) {\n    return false;\n  }\n\n  // trim off padding bytes\n  output.truncate(count);\n  return true;\n};\n\n/** Cipher feedback (CFB) **/\n\nmodes.cfb = function(options) {\n  options = options || {};\n  this.name = 'CFB';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = null;\n  this._outBlock = new Array(this._ints);\n  this._partialBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n};\n\nmodes.cfb.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // use IV as first input\n  this._iv = transformIV(options.iv);\n  this._inBlock = this._iv.slice(0);\n  this._partialBytes = 0;\n};\n\nmodes.cfb.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output, write input as output\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = input.getInt32() ^ this._outBlock[i];\n      output.putInt32(this._inBlock[i]);\n    }\n    return;\n  }\n\n  // handle partial block\n  var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n  if(partialBytes > 0) {\n    partialBytes = this.blockSize - partialBytes;\n  }\n\n  // XOR input with output, write input as partial output\n  this._partialOutput.clear();\n  for(var i = 0; i < this._ints; ++i) {\n    this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];\n    this._partialOutput.putInt32(this._partialBlock[i]);\n  }\n\n  if(partialBytes > 0) {\n    // block still incomplete, restore input buffer\n    input.read -= this.blockSize;\n  } else {\n    // block complete, update input block\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = this._partialBlock[i];\n    }\n  }\n\n  // skip any previous partial bytes\n  if(this._partialBytes > 0) {\n    this._partialOutput.getBytes(this._partialBytes);\n  }\n\n  if(partialBytes > 0 && !finish) {\n    output.putBytes(this._partialOutput.getBytes(\n      partialBytes - this._partialBytes));\n    this._partialBytes = partialBytes;\n    return true;\n  }\n\n  output.putBytes(this._partialOutput.getBytes(\n    inputLength - this._partialBytes));\n  this._partialBytes = 0;\n};\n\nmodes.cfb.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block (CFB always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output, write input as output\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = input.getInt32();\n      output.putInt32(this._inBlock[i] ^ this._outBlock[i]);\n    }\n    return;\n  }\n\n  // handle partial block\n  var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n  if(partialBytes > 0) {\n    partialBytes = this.blockSize - partialBytes;\n  }\n\n  // XOR input with output, write input as partial output\n  this._partialOutput.clear();\n  for(var i = 0; i < this._ints; ++i) {\n    this._partialBlock[i] = input.getInt32();\n    this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);\n  }\n\n  if(partialBytes > 0) {\n    // block still incomplete, restore input buffer\n    input.read -= this.blockSize;\n  } else {\n    // block complete, update input block\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = this._partialBlock[i];\n    }\n  }\n\n  // skip any previous partial bytes\n  if(this._partialBytes > 0) {\n    this._partialOutput.getBytes(this._partialBytes);\n  }\n\n  if(partialBytes > 0 && !finish) {\n    output.putBytes(this._partialOutput.getBytes(\n      partialBytes - this._partialBytes));\n    this._partialBytes = partialBytes;\n    return true;\n  }\n\n  output.putBytes(this._partialOutput.getBytes(\n    inputLength - this._partialBytes));\n  this._partialBytes = 0;\n};\n\n/** Output feedback (OFB) **/\n\nmodes.ofb = function(options) {\n  options = options || {};\n  this.name = 'OFB';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = null;\n  this._outBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n};\n\nmodes.ofb.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // use IV as first input\n  this._iv = transformIV(options.iv);\n  this._inBlock = this._iv.slice(0);\n  this._partialBytes = 0;\n};\n\nmodes.ofb.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(input.length() === 0) {\n    return true;\n  }\n\n  // encrypt block (OFB always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output and update next input\n    for(var i = 0; i < this._ints; ++i) {\n      output.putInt32(input.getInt32() ^ this._outBlock[i]);\n      this._inBlock[i] = this._outBlock[i];\n    }\n    return;\n  }\n\n  // handle partial block\n  var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n  if(partialBytes > 0) {\n    partialBytes = this.blockSize - partialBytes;\n  }\n\n  // XOR input with output\n  this._partialOutput.clear();\n  for(var i = 0; i < this._ints; ++i) {\n    this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n  }\n\n  if(partialBytes > 0) {\n    // block still incomplete, restore input buffer\n    input.read -= this.blockSize;\n  } else {\n    // block complete, update input block\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = this._outBlock[i];\n    }\n  }\n\n  // skip any previous partial bytes\n  if(this._partialBytes > 0) {\n    this._partialOutput.getBytes(this._partialBytes);\n  }\n\n  if(partialBytes > 0 && !finish) {\n    output.putBytes(this._partialOutput.getBytes(\n      partialBytes - this._partialBytes));\n    this._partialBytes = partialBytes;\n    return true;\n  }\n\n  output.putBytes(this._partialOutput.getBytes(\n    inputLength - this._partialBytes));\n  this._partialBytes = 0;\n};\n\nmodes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;\n\n/** Counter (CTR) **/\n\nmodes.ctr = function(options) {\n  options = options || {};\n  this.name = 'CTR';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = null;\n  this._outBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n};\n\nmodes.ctr.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // use IV as first input\n  this._iv = transformIV(options.iv);\n  this._inBlock = this._iv.slice(0);\n  this._partialBytes = 0;\n};\n\nmodes.ctr.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block (CTR always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output\n    for(var i = 0; i < this._ints; ++i) {\n      output.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n  } else {\n    // handle partial block\n    var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n    if(partialBytes > 0) {\n      partialBytes = this.blockSize - partialBytes;\n    }\n\n    // XOR input with output\n    this._partialOutput.clear();\n    for(var i = 0; i < this._ints; ++i) {\n      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n\n    if(partialBytes > 0) {\n      // block still incomplete, restore input buffer\n      input.read -= this.blockSize;\n    }\n\n    // skip any previous partial bytes\n    if(this._partialBytes > 0) {\n      this._partialOutput.getBytes(this._partialBytes);\n    }\n\n    if(partialBytes > 0 && !finish) {\n      output.putBytes(this._partialOutput.getBytes(\n        partialBytes - this._partialBytes));\n      this._partialBytes = partialBytes;\n      return true;\n    }\n\n    output.putBytes(this._partialOutput.getBytes(\n      inputLength - this._partialBytes));\n    this._partialBytes = 0;\n  }\n\n  // block complete, increment counter (input block)\n  inc32(this._inBlock);\n};\n\nmodes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;\n\n/** Galois/Counter Mode (GCM) **/\n\nmodes.gcm = function(options) {\n  options = options || {};\n  this.name = 'GCM';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = new Array(this._ints);\n  this._outBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n\n  // R is actually this value concatenated with 120 more zero bits, but\n  // we only XOR against R so the other zeros have no effect -- we just\n  // apply this value to the first integer in a block\n  this._R = 0xE1000000;\n};\n\nmodes.gcm.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // ensure IV is a byte buffer\n  var iv = forge.util.createBuffer(options.iv);\n\n  // no ciphered data processed yet\n  this._cipherLength = 0;\n\n  // default additional data is none\n  var additionalData;\n  if('additionalData' in options) {\n    additionalData = forge.util.createBuffer(options.additionalData);\n  } else {\n    additionalData = forge.util.createBuffer();\n  }\n\n  // default tag length is 128 bits\n  if('tagLength' in options) {\n    this._tagLength = options.tagLength;\n  } else {\n    this._tagLength = 128;\n  }\n\n  // if tag is given, ensure tag matches tag length\n  this._tag = null;\n  if(options.decrypt) {\n    // save tag to check later\n    this._tag = forge.util.createBuffer(options.tag).getBytes();\n    if(this._tag.length !== (this._tagLength / 8)) {\n      throw new Error('Authentication tag does not match tag length.');\n    }\n  }\n\n  // create tmp storage for hash calculation\n  this._hashBlock = new Array(this._ints);\n\n  // no tag generated yet\n  this.tag = null;\n\n  // generate hash subkey\n  // (apply block cipher to \"zero\" block)\n  this._hashSubkey = new Array(this._ints);\n  this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);\n\n  // generate table M\n  // use 4-bit tables (32 component decomposition of a 16 byte value)\n  // 8-bit tables take more space and are known to have security\n  // vulnerabilities (in native implementations)\n  this.componentBits = 4;\n  this._m = this.generateHashTable(this._hashSubkey, this.componentBits);\n\n  // Note: support IV length different from 96 bits? (only supporting\n  // 96 bits is recommended by NIST SP-800-38D)\n  // generate J_0\n  var ivLength = iv.length();\n  if(ivLength === 12) {\n    // 96-bit IV\n    this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];\n  } else {\n    // IV is NOT 96-bits\n    this._j0 = [0, 0, 0, 0];\n    while(iv.length() > 0) {\n      this._j0 = this.ghash(\n        this._hashSubkey, this._j0,\n        [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);\n    }\n    this._j0 = this.ghash(\n      this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));\n  }\n\n  // generate ICB (initial counter block)\n  this._inBlock = this._j0.slice(0);\n  inc32(this._inBlock);\n  this._partialBytes = 0;\n\n  // consume authentication data\n  additionalData = forge.util.createBuffer(additionalData);\n  // save additional data length as a BE 64-bit number\n  this._aDataLength = from64To32(additionalData.length() * 8);\n  // pad additional data to 128 bit (16 byte) block size\n  var overflow = additionalData.length() % this.blockSize;\n  if(overflow) {\n    additionalData.fillWithByte(0, this.blockSize - overflow);\n  }\n  this._s = [0, 0, 0, 0];\n  while(additionalData.length() > 0) {\n    this._s = this.ghash(this._hashSubkey, this._s, [\n      additionalData.getInt32(),\n      additionalData.getInt32(),\n      additionalData.getInt32(),\n      additionalData.getInt32()\n    ]);\n  }\n};\n\nmodes.gcm.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output\n    for(var i = 0; i < this._ints; ++i) {\n      output.putInt32(this._outBlock[i] ^= input.getInt32());\n    }\n    this._cipherLength += this.blockSize;\n  } else {\n    // handle partial block\n    var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n    if(partialBytes > 0) {\n      partialBytes = this.blockSize - partialBytes;\n    }\n\n    // XOR input with output\n    this._partialOutput.clear();\n    for(var i = 0; i < this._ints; ++i) {\n      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n\n    if(partialBytes === 0 || finish) {\n      // handle overflow prior to hashing\n      if(finish) {\n        // get block overflow\n        var overflow = inputLength % this.blockSize;\n        this._cipherLength += overflow;\n        // truncate for hash function\n        this._partialOutput.truncate(this.blockSize - overflow);\n      } else {\n        this._cipherLength += this.blockSize;\n      }\n\n      // get output block for hashing\n      for(var i = 0; i < this._ints; ++i) {\n        this._outBlock[i] = this._partialOutput.getInt32();\n      }\n      this._partialOutput.read -= this.blockSize;\n    }\n\n    // skip any previous partial bytes\n    if(this._partialBytes > 0) {\n      this._partialOutput.getBytes(this._partialBytes);\n    }\n\n    if(partialBytes > 0 && !finish) {\n      // block still incomplete, restore input buffer, get partial output,\n      // and return early\n      input.read -= this.blockSize;\n      output.putBytes(this._partialOutput.getBytes(\n        partialBytes - this._partialBytes));\n      this._partialBytes = partialBytes;\n      return true;\n    }\n\n    output.putBytes(this._partialOutput.getBytes(\n      inputLength - this._partialBytes));\n    this._partialBytes = 0;\n  }\n\n  // update hash block S\n  this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);\n\n  // increment counter (input block)\n  inc32(this._inBlock);\n};\n\nmodes.gcm.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  var inputLength = input.length();\n  if(inputLength < this.blockSize && !(finish && inputLength > 0)) {\n    return true;\n  }\n\n  // encrypt block (GCM always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // increment counter (input block)\n  inc32(this._inBlock);\n\n  // update hash block S\n  this._hashBlock[0] = input.getInt32();\n  this._hashBlock[1] = input.getInt32();\n  this._hashBlock[2] = input.getInt32();\n  this._hashBlock[3] = input.getInt32();\n  this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);\n\n  // XOR hash input with output\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);\n  }\n\n  // increment cipher data length\n  if(inputLength < this.blockSize) {\n    this._cipherLength += inputLength % this.blockSize;\n  } else {\n    this._cipherLength += this.blockSize;\n  }\n};\n\nmodes.gcm.prototype.afterFinish = function(output, options) {\n  var rval = true;\n\n  // handle overflow\n  if(options.decrypt && options.overflow) {\n    output.truncate(this.blockSize - options.overflow);\n  }\n\n  // handle authentication tag\n  this.tag = forge.util.createBuffer();\n\n  // concatenate additional data length with cipher length\n  var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));\n\n  // include lengths in hash\n  this._s = this.ghash(this._hashSubkey, this._s, lengths);\n\n  // do GCTR(J_0, S)\n  var tag = [];\n  this.cipher.encrypt(this._j0, tag);\n  for(var i = 0; i < this._ints; ++i) {\n    this.tag.putInt32(this._s[i] ^ tag[i]);\n  }\n\n  // trim tag to length\n  this.tag.truncate(this.tag.length() % (this._tagLength / 8));\n\n  // check authentication tag\n  if(options.decrypt && this.tag.bytes() !== this._tag) {\n    rval = false;\n  }\n\n  return rval;\n};\n\n/**\n * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois\n * field multiplication. The field, GF(2^128), is defined by the polynomial:\n *\n * x^128 + x^7 + x^2 + x + 1\n *\n * Which is represented in little-endian binary form as: 11100001 (0xe1). When\n * the value of a coefficient is 1, a bit is set. The value R, is the\n * concatenation of this value and 120 zero bits, yielding a 128-bit value\n * which matches the block size.\n *\n * This function will multiply two elements (vectors of bytes), X and Y, in\n * the field GF(2^128). The result is initialized to zero. For each bit of\n * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)\n * by the current value of Y. For each bit, the value of Y will be raised by\n * a power of x (multiplied by the polynomial x). This can be achieved by\n * shifting Y once to the right. If the current value of Y, prior to being\n * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.\n * Otherwise, we must divide by R after shifting to find the remainder.\n *\n * @param x the first block to multiply by the second.\n * @param y the second block to multiply by the first.\n *\n * @return the block result of the multiplication.\n */\nmodes.gcm.prototype.multiply = function(x, y) {\n  var z_i = [0, 0, 0, 0];\n  var v_i = y.slice(0);\n\n  // calculate Z_128 (block has 128 bits)\n  for(var i = 0; i < 128; ++i) {\n    // if x_i is 0, Z_{i+1} = Z_i (unchanged)\n    // else Z_{i+1} = Z_i ^ V_i\n    // get x_i by finding 32-bit int position, then left shift 1 by remainder\n    var x_i = x[(i / 32) | 0] & (1 << (31 - i % 32));\n    if(x_i) {\n      z_i[0] ^= v_i[0];\n      z_i[1] ^= v_i[1];\n      z_i[2] ^= v_i[2];\n      z_i[3] ^= v_i[3];\n    }\n\n    // if LSB(V_i) is 1, V_i = V_i >> 1\n    // else V_i = (V_i >> 1) ^ R\n    this.pow(v_i, v_i);\n  }\n\n  return z_i;\n};\n\nmodes.gcm.prototype.pow = function(x, out) {\n  // if LSB(x) is 1, x = x >>> 1\n  // else x = (x >>> 1) ^ R\n  var lsb = x[3] & 1;\n\n  // always do x >>> 1:\n  // starting with the rightmost integer, shift each integer to the right\n  // one bit, pulling in the bit from the integer to the left as its top\n  // most bit (do this for the last 3 integers)\n  for(var i = 3; i > 0; --i) {\n    out[i] = (x[i] >>> 1) | ((x[i - 1] & 1) << 31);\n  }\n  // shift the first integer normally\n  out[0] = x[0] >>> 1;\n\n  // if lsb was not set, then polynomial had a degree of 127 and doesn't\n  // need to divided; otherwise, XOR with R to find the remainder; we only\n  // need to XOR the first integer since R technically ends w/120 zero bits\n  if(lsb) {\n    out[0] ^= this._R;\n  }\n};\n\nmodes.gcm.prototype.tableMultiply = function(x) {\n  // assumes 4-bit tables are used\n  var z = [0, 0, 0, 0];\n  for(var i = 0; i < 32; ++i) {\n    var idx = (i / 8) | 0;\n    var x_i = (x[idx] >>> ((7 - (i % 8)) * 4)) & 0xF;\n    var ah = this._m[i][x_i];\n    z[0] ^= ah[0];\n    z[1] ^= ah[1];\n    z[2] ^= ah[2];\n    z[3] ^= ah[3];\n  }\n  return z;\n};\n\n/**\n * A continuing version of the GHASH algorithm that operates on a single\n * block. The hash block, last hash value (Ym) and the new block to hash\n * are given.\n *\n * @param h the hash block.\n * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.\n * @param x the block to hash.\n *\n * @return the hashed value (Ym).\n */\nmodes.gcm.prototype.ghash = function(h, y, x) {\n  y[0] ^= x[0];\n  y[1] ^= x[1];\n  y[2] ^= x[2];\n  y[3] ^= x[3];\n  return this.tableMultiply(y);\n  //return this.multiply(y, h);\n};\n\n/**\n * Precomputes a table for multiplying against the hash subkey. This\n * mechanism provides a substantial speed increase over multiplication\n * performed without a table. The table-based multiplication this table is\n * for solves X * H by multiplying each component of X by H and then\n * composing the results together using XOR.\n *\n * This function can be used to generate tables with different bit sizes\n * for the components, however, this implementation assumes there are\n * 32 components of X (which is a 16 byte vector), therefore each component\n * takes 4-bits (so the table is constructed with bits=4).\n *\n * @param h the hash subkey.\n * @param bits the bit size for a component.\n */\nmodes.gcm.prototype.generateHashTable = function(h, bits) {\n  // TODO: There are further optimizations that would use only the\n  // first table M_0 (or some variant) along with a remainder table;\n  // this can be explored in the future\n  var multiplier = 8 / bits;\n  var perInt = 4 * multiplier;\n  var size = 16 * multiplier;\n  var m = new Array(size);\n  for(var i = 0; i < size; ++i) {\n    var tmp = [0, 0, 0, 0];\n    var idx = (i / perInt) | 0;\n    var shft = ((perInt - 1 - (i % perInt)) * bits);\n    tmp[idx] = (1 << (bits - 1)) << shft;\n    m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);\n  }\n  return m;\n};\n\n/**\n * Generates a table for multiplying against the hash subkey for one\n * particular component (out of all possible component values).\n *\n * @param mid the pre-multiplied value for the middle key of the table.\n * @param bits the bit size for a component.\n */\nmodes.gcm.prototype.generateSubHashTable = function(mid, bits) {\n  // compute the table quickly by minimizing the number of\n  // POW operations -- they only need to be performed for powers of 2,\n  // all other entries can be composed from those powers using XOR\n  var size = 1 << bits;\n  var half = size >>> 1;\n  var m = new Array(size);\n  m[half] = mid.slice(0);\n  var i = half >>> 1;\n  while(i > 0) {\n    // raise m0[2 * i] and store in m0[i]\n    this.pow(m[2 * i], m[i] = []);\n    i >>= 1;\n  }\n  i = 2;\n  while(i < half) {\n    for(var j = 1; j < i; ++j) {\n      var m_i = m[i];\n      var m_j = m[j];\n      m[i + j] = [\n        m_i[0] ^ m_j[0],\n        m_i[1] ^ m_j[1],\n        m_i[2] ^ m_j[2],\n        m_i[3] ^ m_j[3]\n      ];\n    }\n    i *= 2;\n  }\n  m[0] = [0, 0, 0, 0];\n  /* Note: We could avoid storing these by doing composition during multiply\n  calculate top half using composition by speed is preferred. */\n  for(i = half + 1; i < size; ++i) {\n    var c = m[i ^ half];\n    m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];\n  }\n  return m;\n};\n\n/** Utility functions */\n\nfunction transformIV(iv) {\n  if(typeof iv === 'string') {\n    // convert iv string into byte buffer\n    iv = forge.util.createBuffer(iv);\n  }\n\n  if(forge.util.isArray(iv) && iv.length > 4) {\n    // convert iv byte array into byte buffer\n    var tmp = iv;\n    iv = forge.util.createBuffer();\n    for(var i = 0; i < tmp.length; ++i) {\n      iv.putByte(tmp[i]);\n    }\n  }\n  if(!forge.util.isArray(iv)) {\n    // convert iv byte buffer into 32-bit integer array\n    iv = [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()];\n  }\n\n  return iv;\n}\n\nfunction inc32(block) {\n  // increment last 32 bits of block only\n  block[block.length - 1] = (block[block.length - 1] + 1) & 0xFFFFFFFF;\n}\n\nfunction from64To32(num) {\n  // convert 64-bit number to two BE Int32s\n  return [(num / 0x100000000) | 0, num & 0xFFFFFFFF];\n}\n","map":{"mappings":[{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":960,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":961,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":962,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":963,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":964,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":965,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":966,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":967,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":968,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":969,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":970,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":971,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":972,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":973,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":974,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":975,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":976,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":977,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":978,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":979,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":980,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":981,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":982,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":983,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":984,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":985,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":986,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":987,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/node-forge/lib/cipherModes.js","original":{"line":988,"column":0},"generated":{"line":988,"column":0}}],"sources":{"../node_modules/node-forge/lib/cipherModes.js":"/**\n * Supported cipher modes.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nforge.cipher = forge.cipher || {};\n\n// supported cipher modes\nvar modes = module.exports = forge.cipher.modes = forge.cipher.modes || {};\n\n/** Electronic codebook (ECB) (Don't use this; it's not secure) **/\n\nmodes.ecb = function(options) {\n  options = options || {};\n  this.name = 'ECB';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = new Array(this._ints);\n  this._outBlock = new Array(this._ints);\n};\n\nmodes.ecb.prototype.start = function(options) {};\n\nmodes.ecb.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // write output\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\nmodes.ecb.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // decrypt block\n  this.cipher.decrypt(this._inBlock, this._outBlock);\n\n  // write output\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\nmodes.ecb.prototype.pad = function(input, options) {\n  // add PKCS#7 padding to block (each pad byte is the\n  // value of the number of pad bytes)\n  var padding = (input.length() === this.blockSize ?\n    this.blockSize : (this.blockSize - input.length()));\n  input.fillWithByte(padding, padding);\n  return true;\n};\n\nmodes.ecb.prototype.unpad = function(output, options) {\n  // check for error: input data not a multiple of blockSize\n  if(options.overflow > 0) {\n    return false;\n  }\n\n  // ensure padding byte count is valid\n  var len = output.length();\n  var count = output.at(len - 1);\n  if(count > (this.blockSize << 2)) {\n    return false;\n  }\n\n  // trim off padding bytes\n  output.truncate(count);\n  return true;\n};\n\n/** Cipher-block Chaining (CBC) **/\n\nmodes.cbc = function(options) {\n  options = options || {};\n  this.name = 'CBC';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = new Array(this._ints);\n  this._outBlock = new Array(this._ints);\n};\n\nmodes.cbc.prototype.start = function(options) {\n  // Note: legacy support for using IV residue (has security flaws)\n  // if IV is null, reuse block from previous processing\n  if(options.iv === null) {\n    // must have a previous block\n    if(!this._prev) {\n      throw new Error('Invalid IV parameter.');\n    }\n    this._iv = this._prev.slice(0);\n  } else if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  } else {\n    // save IV as \"previous\" block\n    this._iv = transformIV(options.iv);\n    this._prev = this._iv.slice(0);\n  }\n};\n\nmodes.cbc.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  // CBC XOR's IV (or previous block) with plaintext\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = this._prev[i] ^ input.getInt32();\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // write output, save previous block\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n  this._prev = this._outBlock;\n};\n\nmodes.cbc.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // decrypt block\n  this.cipher.decrypt(this._inBlock, this._outBlock);\n\n  // write output, save previous ciphered block\n  // CBC XOR's IV (or previous block) with ciphertext\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._prev[i] ^ this._outBlock[i]);\n  }\n  this._prev = this._inBlock.slice(0);\n};\n\nmodes.cbc.prototype.pad = function(input, options) {\n  // add PKCS#7 padding to block (each pad byte is the\n  // value of the number of pad bytes)\n  var padding = (input.length() === this.blockSize ?\n    this.blockSize : (this.blockSize - input.length()));\n  input.fillWithByte(padding, padding);\n  return true;\n};\n\nmodes.cbc.prototype.unpad = function(output, options) {\n  // check for error: input data not a multiple of blockSize\n  if(options.overflow > 0) {\n    return false;\n  }\n\n  // ensure padding byte count is valid\n  var len = output.length();\n  var count = output.at(len - 1);\n  if(count > (this.blockSize << 2)) {\n    return false;\n  }\n\n  // trim off padding bytes\n  output.truncate(count);\n  return true;\n};\n\n/** Cipher feedback (CFB) **/\n\nmodes.cfb = function(options) {\n  options = options || {};\n  this.name = 'CFB';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = null;\n  this._outBlock = new Array(this._ints);\n  this._partialBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n};\n\nmodes.cfb.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // use IV as first input\n  this._iv = transformIV(options.iv);\n  this._inBlock = this._iv.slice(0);\n  this._partialBytes = 0;\n};\n\nmodes.cfb.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output, write input as output\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = input.getInt32() ^ this._outBlock[i];\n      output.putInt32(this._inBlock[i]);\n    }\n    return;\n  }\n\n  // handle partial block\n  var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n  if(partialBytes > 0) {\n    partialBytes = this.blockSize - partialBytes;\n  }\n\n  // XOR input with output, write input as partial output\n  this._partialOutput.clear();\n  for(var i = 0; i < this._ints; ++i) {\n    this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];\n    this._partialOutput.putInt32(this._partialBlock[i]);\n  }\n\n  if(partialBytes > 0) {\n    // block still incomplete, restore input buffer\n    input.read -= this.blockSize;\n  } else {\n    // block complete, update input block\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = this._partialBlock[i];\n    }\n  }\n\n  // skip any previous partial bytes\n  if(this._partialBytes > 0) {\n    this._partialOutput.getBytes(this._partialBytes);\n  }\n\n  if(partialBytes > 0 && !finish) {\n    output.putBytes(this._partialOutput.getBytes(\n      partialBytes - this._partialBytes));\n    this._partialBytes = partialBytes;\n    return true;\n  }\n\n  output.putBytes(this._partialOutput.getBytes(\n    inputLength - this._partialBytes));\n  this._partialBytes = 0;\n};\n\nmodes.cfb.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block (CFB always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output, write input as output\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = input.getInt32();\n      output.putInt32(this._inBlock[i] ^ this._outBlock[i]);\n    }\n    return;\n  }\n\n  // handle partial block\n  var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n  if(partialBytes > 0) {\n    partialBytes = this.blockSize - partialBytes;\n  }\n\n  // XOR input with output, write input as partial output\n  this._partialOutput.clear();\n  for(var i = 0; i < this._ints; ++i) {\n    this._partialBlock[i] = input.getInt32();\n    this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);\n  }\n\n  if(partialBytes > 0) {\n    // block still incomplete, restore input buffer\n    input.read -= this.blockSize;\n  } else {\n    // block complete, update input block\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = this._partialBlock[i];\n    }\n  }\n\n  // skip any previous partial bytes\n  if(this._partialBytes > 0) {\n    this._partialOutput.getBytes(this._partialBytes);\n  }\n\n  if(partialBytes > 0 && !finish) {\n    output.putBytes(this._partialOutput.getBytes(\n      partialBytes - this._partialBytes));\n    this._partialBytes = partialBytes;\n    return true;\n  }\n\n  output.putBytes(this._partialOutput.getBytes(\n    inputLength - this._partialBytes));\n  this._partialBytes = 0;\n};\n\n/** Output feedback (OFB) **/\n\nmodes.ofb = function(options) {\n  options = options || {};\n  this.name = 'OFB';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = null;\n  this._outBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n};\n\nmodes.ofb.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // use IV as first input\n  this._iv = transformIV(options.iv);\n  this._inBlock = this._iv.slice(0);\n  this._partialBytes = 0;\n};\n\nmodes.ofb.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(input.length() === 0) {\n    return true;\n  }\n\n  // encrypt block (OFB always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output and update next input\n    for(var i = 0; i < this._ints; ++i) {\n      output.putInt32(input.getInt32() ^ this._outBlock[i]);\n      this._inBlock[i] = this._outBlock[i];\n    }\n    return;\n  }\n\n  // handle partial block\n  var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n  if(partialBytes > 0) {\n    partialBytes = this.blockSize - partialBytes;\n  }\n\n  // XOR input with output\n  this._partialOutput.clear();\n  for(var i = 0; i < this._ints; ++i) {\n    this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n  }\n\n  if(partialBytes > 0) {\n    // block still incomplete, restore input buffer\n    input.read -= this.blockSize;\n  } else {\n    // block complete, update input block\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = this._outBlock[i];\n    }\n  }\n\n  // skip any previous partial bytes\n  if(this._partialBytes > 0) {\n    this._partialOutput.getBytes(this._partialBytes);\n  }\n\n  if(partialBytes > 0 && !finish) {\n    output.putBytes(this._partialOutput.getBytes(\n      partialBytes - this._partialBytes));\n    this._partialBytes = partialBytes;\n    return true;\n  }\n\n  output.putBytes(this._partialOutput.getBytes(\n    inputLength - this._partialBytes));\n  this._partialBytes = 0;\n};\n\nmodes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;\n\n/** Counter (CTR) **/\n\nmodes.ctr = function(options) {\n  options = options || {};\n  this.name = 'CTR';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = null;\n  this._outBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n};\n\nmodes.ctr.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // use IV as first input\n  this._iv = transformIV(options.iv);\n  this._inBlock = this._iv.slice(0);\n  this._partialBytes = 0;\n};\n\nmodes.ctr.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block (CTR always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output\n    for(var i = 0; i < this._ints; ++i) {\n      output.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n  } else {\n    // handle partial block\n    var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n    if(partialBytes > 0) {\n      partialBytes = this.blockSize - partialBytes;\n    }\n\n    // XOR input with output\n    this._partialOutput.clear();\n    for(var i = 0; i < this._ints; ++i) {\n      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n\n    if(partialBytes > 0) {\n      // block still incomplete, restore input buffer\n      input.read -= this.blockSize;\n    }\n\n    // skip any previous partial bytes\n    if(this._partialBytes > 0) {\n      this._partialOutput.getBytes(this._partialBytes);\n    }\n\n    if(partialBytes > 0 && !finish) {\n      output.putBytes(this._partialOutput.getBytes(\n        partialBytes - this._partialBytes));\n      this._partialBytes = partialBytes;\n      return true;\n    }\n\n    output.putBytes(this._partialOutput.getBytes(\n      inputLength - this._partialBytes));\n    this._partialBytes = 0;\n  }\n\n  // block complete, increment counter (input block)\n  inc32(this._inBlock);\n};\n\nmodes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;\n\n/** Galois/Counter Mode (GCM) **/\n\nmodes.gcm = function(options) {\n  options = options || {};\n  this.name = 'GCM';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = new Array(this._ints);\n  this._outBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n\n  // R is actually this value concatenated with 120 more zero bits, but\n  // we only XOR against R so the other zeros have no effect -- we just\n  // apply this value to the first integer in a block\n  this._R = 0xE1000000;\n};\n\nmodes.gcm.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // ensure IV is a byte buffer\n  var iv = forge.util.createBuffer(options.iv);\n\n  // no ciphered data processed yet\n  this._cipherLength = 0;\n\n  // default additional data is none\n  var additionalData;\n  if('additionalData' in options) {\n    additionalData = forge.util.createBuffer(options.additionalData);\n  } else {\n    additionalData = forge.util.createBuffer();\n  }\n\n  // default tag length is 128 bits\n  if('tagLength' in options) {\n    this._tagLength = options.tagLength;\n  } else {\n    this._tagLength = 128;\n  }\n\n  // if tag is given, ensure tag matches tag length\n  this._tag = null;\n  if(options.decrypt) {\n    // save tag to check later\n    this._tag = forge.util.createBuffer(options.tag).getBytes();\n    if(this._tag.length !== (this._tagLength / 8)) {\n      throw new Error('Authentication tag does not match tag length.');\n    }\n  }\n\n  // create tmp storage for hash calculation\n  this._hashBlock = new Array(this._ints);\n\n  // no tag generated yet\n  this.tag = null;\n\n  // generate hash subkey\n  // (apply block cipher to \"zero\" block)\n  this._hashSubkey = new Array(this._ints);\n  this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);\n\n  // generate table M\n  // use 4-bit tables (32 component decomposition of a 16 byte value)\n  // 8-bit tables take more space and are known to have security\n  // vulnerabilities (in native implementations)\n  this.componentBits = 4;\n  this._m = this.generateHashTable(this._hashSubkey, this.componentBits);\n\n  // Note: support IV length different from 96 bits? (only supporting\n  // 96 bits is recommended by NIST SP-800-38D)\n  // generate J_0\n  var ivLength = iv.length();\n  if(ivLength === 12) {\n    // 96-bit IV\n    this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];\n  } else {\n    // IV is NOT 96-bits\n    this._j0 = [0, 0, 0, 0];\n    while(iv.length() > 0) {\n      this._j0 = this.ghash(\n        this._hashSubkey, this._j0,\n        [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);\n    }\n    this._j0 = this.ghash(\n      this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));\n  }\n\n  // generate ICB (initial counter block)\n  this._inBlock = this._j0.slice(0);\n  inc32(this._inBlock);\n  this._partialBytes = 0;\n\n  // consume authentication data\n  additionalData = forge.util.createBuffer(additionalData);\n  // save additional data length as a BE 64-bit number\n  this._aDataLength = from64To32(additionalData.length() * 8);\n  // pad additional data to 128 bit (16 byte) block size\n  var overflow = additionalData.length() % this.blockSize;\n  if(overflow) {\n    additionalData.fillWithByte(0, this.blockSize - overflow);\n  }\n  this._s = [0, 0, 0, 0];\n  while(additionalData.length() > 0) {\n    this._s = this.ghash(this._hashSubkey, this._s, [\n      additionalData.getInt32(),\n      additionalData.getInt32(),\n      additionalData.getInt32(),\n      additionalData.getInt32()\n    ]);\n  }\n};\n\nmodes.gcm.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output\n    for(var i = 0; i < this._ints; ++i) {\n      output.putInt32(this._outBlock[i] ^= input.getInt32());\n    }\n    this._cipherLength += this.blockSize;\n  } else {\n    // handle partial block\n    var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n    if(partialBytes > 0) {\n      partialBytes = this.blockSize - partialBytes;\n    }\n\n    // XOR input with output\n    this._partialOutput.clear();\n    for(var i = 0; i < this._ints; ++i) {\n      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n\n    if(partialBytes === 0 || finish) {\n      // handle overflow prior to hashing\n      if(finish) {\n        // get block overflow\n        var overflow = inputLength % this.blockSize;\n        this._cipherLength += overflow;\n        // truncate for hash function\n        this._partialOutput.truncate(this.blockSize - overflow);\n      } else {\n        this._cipherLength += this.blockSize;\n      }\n\n      // get output block for hashing\n      for(var i = 0; i < this._ints; ++i) {\n        this._outBlock[i] = this._partialOutput.getInt32();\n      }\n      this._partialOutput.read -= this.blockSize;\n    }\n\n    // skip any previous partial bytes\n    if(this._partialBytes > 0) {\n      this._partialOutput.getBytes(this._partialBytes);\n    }\n\n    if(partialBytes > 0 && !finish) {\n      // block still incomplete, restore input buffer, get partial output,\n      // and return early\n      input.read -= this.blockSize;\n      output.putBytes(this._partialOutput.getBytes(\n        partialBytes - this._partialBytes));\n      this._partialBytes = partialBytes;\n      return true;\n    }\n\n    output.putBytes(this._partialOutput.getBytes(\n      inputLength - this._partialBytes));\n    this._partialBytes = 0;\n  }\n\n  // update hash block S\n  this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);\n\n  // increment counter (input block)\n  inc32(this._inBlock);\n};\n\nmodes.gcm.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  var inputLength = input.length();\n  if(inputLength < this.blockSize && !(finish && inputLength > 0)) {\n    return true;\n  }\n\n  // encrypt block (GCM always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // increment counter (input block)\n  inc32(this._inBlock);\n\n  // update hash block S\n  this._hashBlock[0] = input.getInt32();\n  this._hashBlock[1] = input.getInt32();\n  this._hashBlock[2] = input.getInt32();\n  this._hashBlock[3] = input.getInt32();\n  this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);\n\n  // XOR hash input with output\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);\n  }\n\n  // increment cipher data length\n  if(inputLength < this.blockSize) {\n    this._cipherLength += inputLength % this.blockSize;\n  } else {\n    this._cipherLength += this.blockSize;\n  }\n};\n\nmodes.gcm.prototype.afterFinish = function(output, options) {\n  var rval = true;\n\n  // handle overflow\n  if(options.decrypt && options.overflow) {\n    output.truncate(this.blockSize - options.overflow);\n  }\n\n  // handle authentication tag\n  this.tag = forge.util.createBuffer();\n\n  // concatenate additional data length with cipher length\n  var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));\n\n  // include lengths in hash\n  this._s = this.ghash(this._hashSubkey, this._s, lengths);\n\n  // do GCTR(J_0, S)\n  var tag = [];\n  this.cipher.encrypt(this._j0, tag);\n  for(var i = 0; i < this._ints; ++i) {\n    this.tag.putInt32(this._s[i] ^ tag[i]);\n  }\n\n  // trim tag to length\n  this.tag.truncate(this.tag.length() % (this._tagLength / 8));\n\n  // check authentication tag\n  if(options.decrypt && this.tag.bytes() !== this._tag) {\n    rval = false;\n  }\n\n  return rval;\n};\n\n/**\n * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois\n * field multiplication. The field, GF(2^128), is defined by the polynomial:\n *\n * x^128 + x^7 + x^2 + x + 1\n *\n * Which is represented in little-endian binary form as: 11100001 (0xe1). When\n * the value of a coefficient is 1, a bit is set. The value R, is the\n * concatenation of this value and 120 zero bits, yielding a 128-bit value\n * which matches the block size.\n *\n * This function will multiply two elements (vectors of bytes), X and Y, in\n * the field GF(2^128). The result is initialized to zero. For each bit of\n * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)\n * by the current value of Y. For each bit, the value of Y will be raised by\n * a power of x (multiplied by the polynomial x). This can be achieved by\n * shifting Y once to the right. If the current value of Y, prior to being\n * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.\n * Otherwise, we must divide by R after shifting to find the remainder.\n *\n * @param x the first block to multiply by the second.\n * @param y the second block to multiply by the first.\n *\n * @return the block result of the multiplication.\n */\nmodes.gcm.prototype.multiply = function(x, y) {\n  var z_i = [0, 0, 0, 0];\n  var v_i = y.slice(0);\n\n  // calculate Z_128 (block has 128 bits)\n  for(var i = 0; i < 128; ++i) {\n    // if x_i is 0, Z_{i+1} = Z_i (unchanged)\n    // else Z_{i+1} = Z_i ^ V_i\n    // get x_i by finding 32-bit int position, then left shift 1 by remainder\n    var x_i = x[(i / 32) | 0] & (1 << (31 - i % 32));\n    if(x_i) {\n      z_i[0] ^= v_i[0];\n      z_i[1] ^= v_i[1];\n      z_i[2] ^= v_i[2];\n      z_i[3] ^= v_i[3];\n    }\n\n    // if LSB(V_i) is 1, V_i = V_i >> 1\n    // else V_i = (V_i >> 1) ^ R\n    this.pow(v_i, v_i);\n  }\n\n  return z_i;\n};\n\nmodes.gcm.prototype.pow = function(x, out) {\n  // if LSB(x) is 1, x = x >>> 1\n  // else x = (x >>> 1) ^ R\n  var lsb = x[3] & 1;\n\n  // always do x >>> 1:\n  // starting with the rightmost integer, shift each integer to the right\n  // one bit, pulling in the bit from the integer to the left as its top\n  // most bit (do this for the last 3 integers)\n  for(var i = 3; i > 0; --i) {\n    out[i] = (x[i] >>> 1) | ((x[i - 1] & 1) << 31);\n  }\n  // shift the first integer normally\n  out[0] = x[0] >>> 1;\n\n  // if lsb was not set, then polynomial had a degree of 127 and doesn't\n  // need to divided; otherwise, XOR with R to find the remainder; we only\n  // need to XOR the first integer since R technically ends w/120 zero bits\n  if(lsb) {\n    out[0] ^= this._R;\n  }\n};\n\nmodes.gcm.prototype.tableMultiply = function(x) {\n  // assumes 4-bit tables are used\n  var z = [0, 0, 0, 0];\n  for(var i = 0; i < 32; ++i) {\n    var idx = (i / 8) | 0;\n    var x_i = (x[idx] >>> ((7 - (i % 8)) * 4)) & 0xF;\n    var ah = this._m[i][x_i];\n    z[0] ^= ah[0];\n    z[1] ^= ah[1];\n    z[2] ^= ah[2];\n    z[3] ^= ah[3];\n  }\n  return z;\n};\n\n/**\n * A continuing version of the GHASH algorithm that operates on a single\n * block. The hash block, last hash value (Ym) and the new block to hash\n * are given.\n *\n * @param h the hash block.\n * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.\n * @param x the block to hash.\n *\n * @return the hashed value (Ym).\n */\nmodes.gcm.prototype.ghash = function(h, y, x) {\n  y[0] ^= x[0];\n  y[1] ^= x[1];\n  y[2] ^= x[2];\n  y[3] ^= x[3];\n  return this.tableMultiply(y);\n  //return this.multiply(y, h);\n};\n\n/**\n * Precomputes a table for multiplying against the hash subkey. This\n * mechanism provides a substantial speed increase over multiplication\n * performed without a table. The table-based multiplication this table is\n * for solves X * H by multiplying each component of X by H and then\n * composing the results together using XOR.\n *\n * This function can be used to generate tables with different bit sizes\n * for the components, however, this implementation assumes there are\n * 32 components of X (which is a 16 byte vector), therefore each component\n * takes 4-bits (so the table is constructed with bits=4).\n *\n * @param h the hash subkey.\n * @param bits the bit size for a component.\n */\nmodes.gcm.prototype.generateHashTable = function(h, bits) {\n  // TODO: There are further optimizations that would use only the\n  // first table M_0 (or some variant) along with a remainder table;\n  // this can be explored in the future\n  var multiplier = 8 / bits;\n  var perInt = 4 * multiplier;\n  var size = 16 * multiplier;\n  var m = new Array(size);\n  for(var i = 0; i < size; ++i) {\n    var tmp = [0, 0, 0, 0];\n    var idx = (i / perInt) | 0;\n    var shft = ((perInt - 1 - (i % perInt)) * bits);\n    tmp[idx] = (1 << (bits - 1)) << shft;\n    m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);\n  }\n  return m;\n};\n\n/**\n * Generates a table for multiplying against the hash subkey for one\n * particular component (out of all possible component values).\n *\n * @param mid the pre-multiplied value for the middle key of the table.\n * @param bits the bit size for a component.\n */\nmodes.gcm.prototype.generateSubHashTable = function(mid, bits) {\n  // compute the table quickly by minimizing the number of\n  // POW operations -- they only need to be performed for powers of 2,\n  // all other entries can be composed from those powers using XOR\n  var size = 1 << bits;\n  var half = size >>> 1;\n  var m = new Array(size);\n  m[half] = mid.slice(0);\n  var i = half >>> 1;\n  while(i > 0) {\n    // raise m0[2 * i] and store in m0[i]\n    this.pow(m[2 * i], m[i] = []);\n    i >>= 1;\n  }\n  i = 2;\n  while(i < half) {\n    for(var j = 1; j < i; ++j) {\n      var m_i = m[i];\n      var m_j = m[j];\n      m[i + j] = [\n        m_i[0] ^ m_j[0],\n        m_i[1] ^ m_j[1],\n        m_i[2] ^ m_j[2],\n        m_i[3] ^ m_j[3]\n      ];\n    }\n    i *= 2;\n  }\n  m[0] = [0, 0, 0, 0];\n  /* Note: We could avoid storing these by doing composition during multiply\n  calculate top half using composition by speed is preferred. */\n  for(i = half + 1; i < size; ++i) {\n    var c = m[i ^ half];\n    m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];\n  }\n  return m;\n};\n\n/** Utility functions */\n\nfunction transformIV(iv) {\n  if(typeof iv === 'string') {\n    // convert iv string into byte buffer\n    iv = forge.util.createBuffer(iv);\n  }\n\n  if(forge.util.isArray(iv) && iv.length > 4) {\n    // convert iv byte array into byte buffer\n    var tmp = iv;\n    iv = forge.util.createBuffer();\n    for(var i = 0; i < tmp.length; ++i) {\n      iv.putByte(tmp[i]);\n    }\n  }\n  if(!forge.util.isArray(iv)) {\n    // convert iv byte buffer into 32-bit integer array\n    iv = [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()];\n  }\n\n  return iv;\n}\n\nfunction inc32(block) {\n  // increment last 32 bits of block only\n  block[block.length - 1] = (block[block.length - 1] + 1) & 0xFFFFFFFF;\n}\n\nfunction from64To32(num) {\n  // convert 64-bit number to two BE Int32s\n  return [(num / 0x100000000) | 0, num & 0xFFFFFFFF];\n}\n"},"lineCount":988}},"hash":"80e387267bcaea95235fc02b3d2fc126","cacheData":{"env":{}}}