{"dependencies":[{"name":"/root/nos-client-new/SmartT-dApp/package.json","includedInParent":true,"mtime":1533711856700},{"name":"/root/nos-client-new/SmartT-dApp/node_modules/node-forge/package.json","includedInParent":true,"mtime":499162500000},{"name":"./forge","loc":{"line":10,"column":20}},{"name":"./util","loc":{"line":11,"column":8}}],"generated":{"js":"/**\n * Javascript implementation of mask generation function MGF1.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nforge.mgf = forge.mgf || {};\nvar mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};\n\n/**\n * Creates a MGF1 mask generation function object.\n *\n * @param md the message digest API to use (eg: forge.md.sha1.create()).\n *\n * @return a mask generation function object.\n */\nmgf1.create = function(md) {\n  var mgf = {\n    /**\n     * Generate mask of specified length.\n     *\n     * @param {String} seed The seed for mask generation.\n     * @param maskLen Number of bytes to generate.\n     * @return {String} The generated mask.\n     */\n    generate: function(seed, maskLen) {\n      /* 2. Let T be the empty octet string. */\n      var t = new forge.util.ByteBuffer();\n\n      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */\n      var len = Math.ceil(maskLen / md.digestLength);\n      for(var i = 0; i < len; i++) {\n        /* a. Convert counter to an octet string C of length 4 octets */\n        var c = new forge.util.ByteBuffer();\n        c.putInt32(i);\n\n        /* b. Concatenate the hash of the seed mgfSeed and C to the octet\n         * string T: */\n        md.start();\n        md.update(seed + c.getBytes());\n        t.putBuffer(md.digest());\n      }\n\n      /* Output the leading maskLen octets of T as the octet string mask. */\n      t.truncate(t.length() - maskLen);\n      return t.getBytes();\n    }\n  };\n\n  return mgf;\n};\n","map":{"mappings":[{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/node-forge/lib/mgf1.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}}],"sources":{"../node_modules/node-forge/lib/mgf1.js":"/**\n * Javascript implementation of mask generation function MGF1.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nforge.mgf = forge.mgf || {};\nvar mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};\n\n/**\n * Creates a MGF1 mask generation function object.\n *\n * @param md the message digest API to use (eg: forge.md.sha1.create()).\n *\n * @return a mask generation function object.\n */\nmgf1.create = function(md) {\n  var mgf = {\n    /**\n     * Generate mask of specified length.\n     *\n     * @param {String} seed The seed for mask generation.\n     * @param maskLen Number of bytes to generate.\n     * @return {String} The generated mask.\n     */\n    generate: function(seed, maskLen) {\n      /* 2. Let T be the empty octet string. */\n      var t = new forge.util.ByteBuffer();\n\n      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */\n      var len = Math.ceil(maskLen / md.digestLength);\n      for(var i = 0; i < len; i++) {\n        /* a. Convert counter to an octet string C of length 4 octets */\n        var c = new forge.util.ByteBuffer();\n        c.putInt32(i);\n\n        /* b. Concatenate the hash of the seed mgfSeed and C to the octet\n         * string T: */\n        md.start();\n        md.update(seed + c.getBytes());\n        t.putBuffer(md.digest());\n      }\n\n      /* Output the leading maskLen octets of T as the octet string mask. */\n      t.truncate(t.length() - maskLen);\n      return t.getBytes();\n    }\n  };\n\n  return mgf;\n};\n"},"lineCount":58}},"hash":"6a9fbdd743437ed62591d963bb3fdd87","cacheData":{"env":{}}}